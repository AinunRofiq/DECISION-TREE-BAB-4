# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lZvBXxLPU1U_aFOW3jZIyrQ7F6fazaYX
"""

import numpy as np
from sklearn.model_selection import train_test_split

from google.colab import files
files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split

datainput = pd.read_csv("googlecolab.csv", delimiter=",")

# Memilih kolom yang relevan untuk fitur (x) dan target (y)
x = datainput[['Status Ortu', 'Penghasilan', 'Kepemilikan Rumah', 'Jumlah Tanggungan', 'KIS Atau SKTM', 'Nilai Rata-Rata']]
y = datainput["Keterangan"]

# Lakukan pemisahan data latih dan data uji
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=3)

# Memeriksa bentuk data latih dan data uji
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

import pandas as pd
from sklearn import preprocessing

datainput = pd.read_csv("googlecolab.csv", delimiter=",")

x = datainput[['Status Ortu','Penghasilan','Kepemilikan Rumah','Jumlah Tanggungan','KIS Atau SKTM','Nilai Rata-Rata']]

# Pemrosesan awal data untuk kolom kategorikal (Status Ayah, Status Ibu, Penghasilan Ayah, Penghasilan Ibu, Kepemilikan Rumah, Jumlah Tanggungan, KIS Atau SKTM, Nilai Rata-Rata)
label_encoder = preprocessing.LabelEncoder()

x['Status Ortu'] = label_encoder.fit_transform(x['Status Ortu'])
x['Penghasilan'] = label_encoder.fit_transform(x['Penghasilan'])
x['Kepemilikan Rumah'] = label_encoder.fit_transform(x['Kepemilikan Rumah'])
x['Jumlah Tanggungan'] = label_encoder.fit_transform(x['Jumlah Tanggungan'])
x['KIS Atau SKTM'] = label_encoder.fit_transform(x['KIS Atau SKTM'])
x['Nilai Rata-Rata'] = label_encoder.fit_transform(x['Nilai Rata-Rata'])

from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt  # Impor matplotlib untuk membuat plot
from sklearn.tree import DecisionTreeClassifier, plot_tree  # Impor fungsi plot_tree

# Dengan asumsi 'x' berisi fitur Anda dan 'y' berisi variabel target Anda

# Enkode variabel kategori menggunakan LabelEncoder
label_encoder = LabelEncoder()
for col in x.columns:
    if x[col].dtype == 'object':  # Periksa apakah kolomnya kategorikal
        x[col] = label_encoder.fit_transform(x[col])

# Pisahkan data menjadi set pelatihan dan pengujian
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=3)

# Inisialisasi dan sesuaikan DecisionTreeClassifier
Tree = DecisionTreeClassifier(criterion="entropy", max_depth=4)
Tree.fit(x_train, y_train)

# Prediksi menggunakan model terlatih
predicted = Tree.predict(x_test)

# Menghitung dan mencetak akurasi
print("\nDecisionTree's Accuracy:", accuracy_score(y_test, predicted))

# Plot pohon keputusan
plt.figure(figsize=(20, 10))
plot_tree(Tree, fontsize=10)
plt.show()

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix

# Dengan asumsi Tree adalah instance DecisionTreeClassifier
Tree.fit(x_train, y_train)
predicted = Tree.predict(x_test)
cm = confusion_matrix(y_test, predicted)
print("Confusion matrix =", cm)
print("Predicted values:", predicted)

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix, accuracy_score

# Dengan asumsi Tree adalah instance DecisionTreeClassifier
Tree.fit(x_train, y_train)
predicted = Tree.predict(x_test)
cm = confusion_matrix(y_test, predicted)
akurasi = accuracy_score(y_test, predicted)
print("DecisionTrees's Accuracy (%)", akurasi * 100)